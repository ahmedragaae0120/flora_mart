// Mocks generated by Mockito 5.4.5 from annotations
// in flora_mart/test/presentation/auth/forget_password/view/forget_password/view_model/auth_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flora_mart/core/api/api_result.dart' as _i7;
import 'package:flora_mart/domain/repo_contract/forget_password_repo_contract/forget_password_repo.dart'
    as _i2;
import 'package:flora_mart/domain/repo_contract/forget_password_repo_contract/reset_password_repo.dart'
    as _i4;
import 'package:flora_mart/domain/repo_contract/forget_password_repo_contract/verify_reset_code_repo.dart'
    as _i3;
import 'package:flora_mart/domain/usecase/forget_password_usecases/forget_password_usecase.dart'
    as _i5;
import 'package:flora_mart/domain/usecase/forget_password_usecases/reset_password_usecase.dart'
    as _i10;
import 'package:flora_mart/domain/usecase/forget_password_usecases/verify_reset_code_usecase.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeForgetpasswordRepo_0 extends _i1.SmartFake
    implements _i2.ForgetpasswordRepo {
  _FakeForgetpasswordRepo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVerifyresetcodeRepo_1 extends _i1.SmartFake
    implements _i3.VerifyresetcodeRepo {
  _FakeVerifyresetcodeRepo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResetpasswordRepo_2 extends _i1.SmartFake
    implements _i4.ResetpasswordRepo {
  _FakeResetpasswordRepo_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ForgetPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgetPasswordUseCase extends _i1.Mock
    implements _i5.ForgetPasswordUseCase {
  MockForgetPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ForgetpasswordRepo get forgetPassword =>
      (super.noSuchMethod(
            Invocation.getter(#forgetPassword),
            returnValue: _FakeForgetpasswordRepo_0(
              this,
              Invocation.getter(#forgetPassword),
            ),
          )
          as _i2.ForgetpasswordRepo);

  @override
  set forgetPassword(_i2.ForgetpasswordRepo? _forgetPassword) =>
      super.noSuchMethod(
        Invocation.setter(#forgetPassword, _forgetPassword),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i7.ApiResult<bool>> invoke({required String? email}) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {#email: email}),
            returnValue: _i6.Future<_i7.ApiResult<bool>>.value(
              _i8.dummyValue<_i7.ApiResult<bool>>(
                this,
                Invocation.method(#invoke, [], {#email: email}),
              ),
            ),
          )
          as _i6.Future<_i7.ApiResult<bool>>);
}

/// A class which mocks [VerifyresetcodeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyresetcodeUseCase extends _i1.Mock
    implements _i9.VerifyresetcodeUseCase {
  MockVerifyresetcodeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.VerifyresetcodeRepo get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeVerifyresetcodeRepo_1(
              this,
              Invocation.getter(#repo),
            ),
          )
          as _i3.VerifyresetcodeRepo);

  @override
  set repo(_i3.VerifyresetcodeRepo? _repo) => super.noSuchMethod(
    Invocation.setter(#repo, _repo),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i7.ApiResult<bool>> check({required String? code}) =>
      (super.noSuchMethod(
            Invocation.method(#check, [], {#code: code}),
            returnValue: _i6.Future<_i7.ApiResult<bool>>.value(
              _i8.dummyValue<_i7.ApiResult<bool>>(
                this,
                Invocation.method(#check, [], {#code: code}),
              ),
            ),
          )
          as _i6.Future<_i7.ApiResult<bool>>);
}

/// A class which mocks [ResetpasswordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetpasswordUsecase extends _i1.Mock
    implements _i10.ResetpasswordUsecase {
  MockResetpasswordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ResetpasswordRepo get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeResetpasswordRepo_2(
              this,
              Invocation.getter(#repo),
            ),
          )
          as _i4.ResetpasswordRepo);

  @override
  set repo(_i4.ResetpasswordRepo? _repo) => super.noSuchMethod(
    Invocation.setter(#repo, _repo),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i7.ApiResult<bool>> invoke({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i6.Future<_i7.ApiResult<bool>>.value(
              _i8.dummyValue<_i7.ApiResult<bool>>(
                this,
                Invocation.method(#invoke, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i6.Future<_i7.ApiResult<bool>>);
}
