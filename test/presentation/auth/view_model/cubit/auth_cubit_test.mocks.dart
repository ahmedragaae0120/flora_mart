// Mocks generated by Mockito 5.4.5 from annotations
// in flora_mart/test/presentation/auth/view_model/cubit/auth_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flora_mart/core/api/api_result.dart' as _i10;
import 'package:flora_mart/domain/common/result.dart' as _i6;
import 'package:flora_mart/domain/entity/auth/auth_response_entity.dart'
    as _i11;
import 'package:flora_mart/domain/repo_contract/auth_repo.dart' as _i3;
import 'package:flora_mart/domain/repo_contract/guest_repo.dart' as _i2;
import 'package:flora_mart/domain/usecase/changeGuest_usecase.dart' as _i8;
import 'package:flora_mart/domain/usecase/check_guest_usecase.dart' as _i4;
import 'package:flora_mart/domain/usecase/register_usecase.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGuestRepo_0 extends _i1.SmartFake implements _i2.GuestRepo {
  _FakeGuestRepo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthRepo_1 extends _i1.SmartFake implements _i3.AuthRepo {
  _FakeAuthRepo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CheckGuestUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckGuestUseCase extends _i1.Mock implements _i4.CheckGuestUseCase {
  MockCheckGuestUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GuestRepo get authRepo =>
      (super.noSuchMethod(
            Invocation.getter(#authRepo),
            returnValue: _FakeGuestRepo_0(this, Invocation.getter(#authRepo)),
          )
          as _i2.GuestRepo);

  @override
  _i5.Future<_i6.Result<bool>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i6.Result<bool>>.value(
              _i7.dummyValue<_i6.Result<bool>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i6.Result<bool>>);
}

/// A class which mocks [ChangeguestUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeguestUsecase extends _i1.Mock
    implements _i8.ChangeguestUsecase {
  MockChangeguestUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GuestRepo get authRepo =>
      (super.noSuchMethod(
            Invocation.getter(#authRepo),
            returnValue: _FakeGuestRepo_0(this, Invocation.getter(#authRepo)),
          )
          as _i2.GuestRepo);

  @override
  _i5.Future<bool> call({required bool? isGuest}) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#isGuest: isGuest}),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}

/// A class which mocks [RegisterUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUsecase extends _i1.Mock implements _i9.RegisterUsecase {
  MockRegisterUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepo get authRepo =>
      (super.noSuchMethod(
            Invocation.getter(#authRepo),
            returnValue: _FakeAuthRepo_1(this, Invocation.getter(#authRepo)),
          )
          as _i3.AuthRepo);

  @override
  _i5.Future<_i10.ApiResult<_i11.AuthResponseEntity>> call({
    required String? firstName,
    required String? lastName,
    required String? email,
    required String? password,
    required String? rePassword,
    required String? phone,
    required String? gender,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #firstName: firstName,
              #lastName: lastName,
              #email: email,
              #password: password,
              #rePassword: rePassword,
              #phone: phone,
              #gender: gender,
            }),
            returnValue:
                _i5.Future<_i10.ApiResult<_i11.AuthResponseEntity>>.value(
                  _i7.dummyValue<_i10.ApiResult<_i11.AuthResponseEntity>>(
                    this,
                    Invocation.method(#call, [], {
                      #firstName: firstName,
                      #lastName: lastName,
                      #email: email,
                      #password: password,
                      #rePassword: rePassword,
                      #phone: phone,
                      #gender: gender,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i10.ApiResult<_i11.AuthResponseEntity>>);
}
